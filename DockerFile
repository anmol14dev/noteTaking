# Stage 1: Build the Spring Boot application
# Uses OpenJDK 21 JDK for compiling and building
FROM openjdk:21-jdk-slim-buster as build

# Set the working directory inside the build container
WORKDIR /app

# Copy the Gradle wrapper and project files
# This strategy leverages Docker's layer caching for faster subsequent builds
# if only the source code changes.
COPY gradlew .
COPY gradle gradle
COPY build.gradle.kts .
COPY settings.gradle.kts .
COPY src src

# Make the Gradle wrapper executable
RUN chmod +x ./gradlew

# Build the Spring Boot executable JAR
# --no-daemon is important for Docker builds
RUN ./gradlew clean bootJar --no-daemon

# Stage 2: Create the final production image
# Uses OpenJDK 21 JRE for running the application, which is smaller
FROM openjdk:21-jre-slim-buster

# Set the working directory for the final container
WORKDIR /app

# Copy the executable JAR from the build stage
# This ensures only the compiled JAR is in the final image, not build artifacts or source
COPY --from=build /app/build/libs/*.jar app.jar

# Expose the port on which your Spring Boot application runs
# (Default for Spring Boot is 8080)
EXPOSE 8080

# Define the command to run your Spring Boot application when the container starts
ENTRYPOINT ["java", "-jar", "app.jar"]

# --- Optional: Add a health check (good practice for containerized apps) ---
# This requires 'spring-boot-starter-actuator' dependency in your build.gradle.kts
# HEALTHCHECK --interval=30s --timeout=10s --retries=5 \
#  CMD curl -f http://localhost:8080/actuator/health || exit 1